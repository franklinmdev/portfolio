---
import { Image } from "astro:assets"
import avatar from "@/assets/avatar.webp"
import { getRelativeLocaleUrl } from "astro:i18n"
import {
  createTranslations,
  getLangFromUrl,
  languages,
  removeLocalePrefix,
} from "@/i18n/utils"
import type { Language } from "@/i18n/utils"

const lang = getLangFromUrl(Astro.url)
const t = createTranslations(lang)

const isHomePage =
  removeLocalePrefix(Astro.url.pathname) === "/" ||
  removeLocalePrefix(Astro.url.pathname) === ""

const homeUrl = getRelativeLocaleUrl(lang, "/")
const experienceUrl = isHomePage ? "#experience" : `${homeUrl}#experience`
const projectsUrl = isHomePage ? "#projects" : `${homeUrl}#projects`
const contactUrl = isHomePage ? "#contact" : `${homeUrl}#contact`

const otherLang = (lang === "en" ? "es" : "en") as Language
const currentPath = removeLocalePrefix(Astro.url.pathname)
const otherLangUrl = getRelativeLocaleUrl(otherLang, currentPath)
const otherLangName = languages[otherLang]
---

<header
  id="header"
  class="bg-opacity-80 fixed top-0 right-0 left-0 z-50 bg-[#111111] backdrop-blur-sm"
>
  <div class="container mx-auto max-w-6xl px-4 py-4 sm:px-6 lg:px-8">
    <nav class="flex items-center justify-between">
      <a
        href={homeUrl}
        id="avatar-home-btn"
        class="cursor-pointer text-xl font-bold tracking-tighter text-white"
        aria-label="Go to homepage"
      >
        <Image
          src={avatar}
          width={80}
          height={80}
          alt="Franklin Martinez"
          priority
          loading="eager"
          quality={100}
          class="h-10 w-10 rounded-full ring-2 ring-violet-400/20 transition-all duration-300 hover:ring-violet-400/40"
        />
      </a>
      <div class="hidden items-center space-x-8 md:flex">
        <a
          href={experienceUrl}
          class="nav-link text-sm font-medium text-zinc-400 transition-colors hover:text-white"
          data-section="experience"
          data-astro-prefetch
        >
          {t("nav.experience")}
        </a>
        <a
          href={projectsUrl}
          class="nav-link text-sm font-medium text-zinc-400 transition-colors hover:text-white"
          data-section="projects"
          data-astro-prefetch
        >
          {t("nav.projects")}
        </a>
        <a
          href={contactUrl}
          class="nav-link inline-block rounded-md bg-zinc-800 px-3 py-1.5 text-sm font-medium text-white transition-colors hover:bg-zinc-700"
          data-section="contact"
          data-astro-prefetch
        >
          {t("nav.contact")}
        </a>
        <a
          href={otherLangUrl}
          class="w-8 cursor-pointer text-center text-sm font-semibold text-zinc-400 uppercase transition-colors hover:text-white"
          title={`Switch to ${otherLangName}`}
          data-lang-switch
          data-astro-prefetch
        >
          {otherLang.toUpperCase()}
        </a>
      </div>
      <button
        id="mobile-menu-btn"
        class="flex h-10 w-10 items-center justify-center rounded-full text-white transition-colors hover:bg-zinc-800/50 md:hidden"
        aria-label="Toggle mobile menu"
      >
        <svg
          class="h-6 w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16m-7 6h7"
          >
          </path>
        </svg>
      </button>
    </nav>
  </div>
  <div id="mobile-menu" class="hidden px-4 pb-4 sm:px-6 md:hidden lg:px-8">
    <a
      href={experienceUrl}
      class="mobile-nav-link block py-3 text-zinc-300 transition-colors"
      data-section="experience"
      data-astro-prefetch
    >
      {t("nav.experience")}
    </a>
    <a
      href={projectsUrl}
      class="mobile-nav-link block py-3 text-zinc-300 transition-colors"
      data-section="projects"
      data-astro-prefetch
    >
      {t("nav.projects")}
    </a>
    <a
      href={contactUrl}
      class="mobile-nav-link mt-3 block rounded-md bg-zinc-800 px-3 py-3 text-center font-medium text-white transition-colors hover:bg-zinc-700"
      data-section="contact"
      data-astro-prefetch
    >
      {t("nav.contact")}
    </a>
    <a
      href={otherLangUrl}
      class="mt-3 block w-full cursor-pointer py-3 text-center font-medium text-zinc-300 uppercase"
      title={`Switch to ${otherLangName}`}
      data-lang-switch
      data-astro-prefetch
    >
      {otherLang.toUpperCase()}
    </a>
  </div>
</header>

<script>
  import { navigate } from "astro:transitions/client"

  function initializeHeader() {
    document.querySelectorAll("[data-lang-switch]").forEach((link) => {
      if (!(link instanceof HTMLAnchorElement)) return
      if (link.dataset.listenerAdded === "true") return

      link.addEventListener("click", (event) => {
        event.preventDefault()
        const href = link.href
        const currentHash = window.location.hash
        const targetUrl = new URL(href)
        if (currentHash) {
          targetUrl.hash = currentHash
        }
        navigate(targetUrl.pathname + targetUrl.hash)
      })
      link.dataset.listenerAdded = "true"
    })

    const updateActiveNavigation = (activeSection: string) => {
      document
        .querySelectorAll(".nav-link, .mobile-nav-link")
        .forEach((link) => {
          const section = link.getAttribute("data-section")
          const isContact = section === "contact"
          const isActive = section === activeSection

          if (isContact) {
            link.classList.toggle("bg-violet-600", isActive)
            link.classList.toggle("bg-zinc-800", !isActive)
          } else {
            link.classList.toggle("text-white", isActive)
            link.classList.toggle("font-semibold", isActive)
            link.classList.toggle(
              "text-zinc-400",
              !isActive && link.classList.contains("nav-link")
            )
            link.classList.toggle(
              "text-zinc-300",
              !isActive && link.classList.contains("mobile-nav-link")
            )
          }
        })
    }

    const mobileMenuBtn = document.getElementById("mobile-menu-btn")
    const mobileMenu = document.getElementById("mobile-menu")
    if (mobileMenuBtn && mobileMenu) {
      mobileMenuBtn.onclick = () => mobileMenu.classList.toggle("hidden")

      const mobileNavLinks = mobileMenu.querySelectorAll("a")
      mobileNavLinks.forEach((link) => {
        link.addEventListener("click", () => {
          mobileMenu.classList.add("hidden")
        })
      })
    }

    const avatarHomeBtn = document.getElementById("avatar-home-btn")
    if (avatarHomeBtn instanceof HTMLAnchorElement) {
      avatarHomeBtn.onclick = () => {
        if (mobileMenu) mobileMenu.classList.add("hidden")
      }
    }

    const observer = new IntersectionObserver(
      (entries) => {
        const intersecting = entries.filter((e) => e.isIntersecting)
        if (intersecting.length === 0) return

        intersecting.sort(
          (a, b) => a.boundingClientRect.top - b.boundingClientRect.top
        )
        const activeEntry = intersecting[0]
        if (!activeEntry) return

        const sectionId = activeEntry.target.id

        let activeSection = "home"
        if (sectionId.includes("experience")) activeSection = "experience"
        else if (sectionId.includes("projects")) activeSection = "projects"
        else if (sectionId.includes("contact")) activeSection = "contact"

        updateActiveNavigation(activeSection)
      },
      { root: null, rootMargin: "-80px 0px -40% 0px", threshold: 0.1 }
    )

    setTimeout(() => {
      const sections = document.querySelectorAll(
        "#home, [id*='experience'], [id*='projects'], [id*='contact']"
      )
      if (sections.length > 0) {
        sections.forEach((section) => observer.observe(section))
        if (window.scrollY === 0) updateActiveNavigation("home")
      }
    }, 100)
  }

  document.addEventListener("DOMContentLoaded", initializeHeader)
  document.addEventListener("astro:after-swap", initializeHeader)
</script>
