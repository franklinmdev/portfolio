---
import UserAvatar from "@/components/react/UserAvatar.tsx"
import {
  getLangFromUrl,
  useTranslations,
  getLocalizedUrl,
  languages,
} from "@/i18n/utils"
import type { Language } from "@/i18n/utils"

// Get current language and translation function
const lang = getLangFromUrl(Astro.url)
const t = useTranslations(lang)

// Always create locale-prefixed root (e.g. /en/, /es/)
const baseLocalePath = lang === "en" ? "/en/" : getLocalizedUrl("/", lang)
const experienceUrl = baseLocalePath + "#experience"
const projectsUrl = baseLocalePath + "#projects"
const contactUrl = baseLocalePath + "#contact"

// Get the other language for language switcher
const otherLang = (lang === "en" ? "es" : "en") as Language
const currentPath = Astro.url.pathname.replace(`/${lang}`, "") || ""
const otherLangUrl = getLocalizedUrl(currentPath, otherLang)
const otherLangName = languages[otherLang]

// Preserve URL fragment when switching languages
// Mobile menu functionality
// Language switcher handled by navigation links
// Avatar home button functionality
// Detect current language from URL
// Check if we're on the home page or a different page
// We're on home page, just scroll to top
// Update active states
// We're on a different page, navigate to home
// Close mobile menu if open
// Smooth scrolling for navigation links
---

<header
  id="header"
  class="bg-opacity-80 fixed top-0 right-0 left-0 z-50 bg-[#111111] backdrop-blur-sm"
>
  <div class="container mx-auto max-w-6xl px-4 py-4 sm:px-6 lg:px-8">
    <nav class="flex items-center justify-between">
      <button
        id="avatar-home-btn"
        class="cursor-pointer text-xl font-bold tracking-tighter text-white"
      >
        <UserAvatar client:load />
      </button>
      <div class="hidden items-center space-x-8 md:flex">
        <a
          href={experienceUrl}
          class="nav-link text-sm font-medium text-zinc-400 transition-colors hover:text-white"
          data-section="experience"
        >
          {t("nav.experience")}
        </a>
        <a
          href={projectsUrl}
          class="nav-link text-sm font-medium text-zinc-400 transition-colors hover:text-white"
          data-section="projects"
        >
          {t("nav.projects")}
        </a>
        <a
          href={contactUrl}
          class="nav-link inline-block rounded-md bg-zinc-800 px-3 py-1.5 text-sm font-medium text-white transition-colors hover:bg-zinc-700"
          data-section="contact"
        >
          {t("nav.contact")}
        </a>
        <a
          href={otherLangUrl}
          class="w-8 cursor-pointer text-center text-sm font-semibold text-zinc-400 uppercase transition-colors hover:text-white"
          title={`Switch to ${otherLangName}`}
          data-lang-switch
        >
          {otherLang.toUpperCase()}
        </a>
      </div>
      <button
        id="mobile-menu-btn"
        class="flex h-10 w-10 items-center justify-center rounded-full text-white transition-colors hover:bg-zinc-800/50 md:hidden"
        aria-label="Toggle mobile menu"
      >
        <svg
          class="h-6 w-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16m-7 6h7"
          >
          </path>
        </svg>
      </button>
    </nav>
  </div>
  <div id="mobile-menu" class="hidden px-4 pb-4 sm:px-6 md:hidden lg:px-8">
    <a
      href={experienceUrl}
      class="mobile-nav-link block py-3 text-zinc-300 transition-colors"
      data-section="experience"
    >
      {t("nav.experience")}
    </a>
    <a
      href={projectsUrl}
      class="mobile-nav-link block py-3 text-zinc-300 transition-colors"
      data-section="projects"
    >
      {t("nav.projects")}
    </a>
    <a
      href={contactUrl}
      class="mobile-nav-link mt-3 block rounded-md bg-zinc-800 px-3 py-3 text-center font-medium text-white transition-colors hover:bg-zinc-700"
      data-section="contact"
    >
      {t("nav.contact")}
    </a>
    <a
      href={otherLangUrl}
      class="mt-3 block w-full cursor-pointer py-3 text-center font-medium text-zinc-300 uppercase"
      title={`Switch to ${otherLangName}`}
      data-lang-switch
    >
      {otherLang.toUpperCase()}
    </a>
  </div>
</header>

<script>
  // Preserve URL fragment when switching languages
  document.addEventListener("DOMContentLoaded", () => {
    const langSwitchers = document.querySelectorAll("[data-lang-switch]")

    langSwitchers.forEach((switcher) => {
      switcher.addEventListener("click", (e) => {
        e.preventDefault()
        const baseUrl = switcher.getAttribute("href")
        const currentHash = window.location.hash
        window.location.href = baseUrl + currentHash
      })
    })
  })
</script>

<script>
  // Mobile menu functionality
  const mobileMenuBtn = document.getElementById("mobile-menu-btn")
  const mobileMenu = document.getElementById("mobile-menu")

  if (mobileMenuBtn && mobileMenu) {
    mobileMenuBtn.addEventListener("click", () => {
      mobileMenu.classList.toggle("hidden")
    })
  }

  // Language switcher now handled by navigation links (no JS needed)

  // Avatar home button functionality
  const avatarHomeBtn = document.getElementById("avatar-home-btn")
  if (avatarHomeBtn) {
    avatarHomeBtn.addEventListener("click", () => {
      // Detect current language from URL
      const pathSegments = window.location.pathname.split("/").filter(Boolean)
      const currentLang =
        pathSegments[0] && ["en", "es"].includes(pathSegments[0])
          ? pathSegments[0]
          : "en"
      const homeUrl = `/${currentLang}`

      // Check if we're on the home page or a different page
      if (
        window.location.pathname === homeUrl ||
        window.location.pathname === `${homeUrl}/`
      ) {
        // We're on home page, just scroll to top
        window.scrollTo({ top: 0, behavior: "smooth" })
        // Update active states
        updateActiveNavigation("home")
      } else {
        // We're on a different page, navigate to home
        window.location.href = homeUrl
      }
      // Close mobile menu if open
      if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
        mobileMenu.classList.add("hidden")
      }
    })
  }

  // Smooth scrolling for navigation links following web best practices
  document.addEventListener("click", (e) => {
    if (!e.target) return
    const target = (e.target as Element).closest("a")
    if (!target) return

    const href = target.getAttribute("href")
    if (!href || !href.includes("#")) return

    e.preventDefault()

    // Parse the URL to handle both same-page and cross-page navigation
    const [basePath, hash] = href.split("#")
    const targetId = hash

    // Close mobile menu
    if (mobileMenu && !mobileMenu.classList.contains("hidden")) {
      mobileMenu.classList.add("hidden")
    }

    // Handle cross-page navigation (e.g., from project pages to home#section)
    if (typeof basePath === "string" && basePath) {
      const normalizedBasePath = basePath.endsWith("/")
        ? basePath
        : basePath + "/"
      const normalizedCurrentPath = window.location.pathname.endsWith("/")
        ? window.location.pathname
        : window.location.pathname + "/"
      if (normalizedBasePath !== normalizedCurrentPath) {
        // Navigate to the new page with hash
        window.location.href = href
        return
      }
    }

    // Handle same-page navigation
    if (targetId) {
      const targetElement = document.getElementById(targetId)
      if (targetElement) {
        const headerOffset = 80
        const targetPosition = targetElement.offsetTop - headerOffset
        const maxScroll =
          document.documentElement.scrollHeight -
          document.documentElement.clientHeight
        const finalPosition = Math.min(Math.max(0, targetPosition), maxScroll)

        window.scrollTo({
          top: finalPosition,
          behavior: "smooth",
        })

        // Update URL hash
        if (history.replaceState) {
          history.replaceState(null, "", `#${targetId}`)
        }
      }
    }
  })

  // Active navigation management
  function updateActiveNavigation(activeSection: string) {
    // Desktop navigation
    const navLinks = document.querySelectorAll(".nav-link")
    navLinks.forEach((link) => {
      const section = link.getAttribute("data-section")
      const linkElement = link as HTMLElement

      if (section === activeSection) {
        // Add active styles
        if (section === "contact") {
          // Use inline styles to ensure background color changes
          linkElement.style.backgroundColor = "#7c3aed" // violet-600
        } else {
          link.classList.remove("text-zinc-400")
          link.classList.add("text-white", "font-semibold")
        }
      } else {
        // Remove active styles
        if (section === "contact") {
          // Reset to default background color
          linkElement.style.backgroundColor = "#27272a" // zinc-800
        } else {
          link.classList.remove("text-white", "font-semibold")
          link.classList.add("text-zinc-400")
        }
      }
    })

    // Mobile navigation
    const mobileNavLinks = document.querySelectorAll(".mobile-nav-link")
    mobileNavLinks.forEach((link) => {
      const section = link.getAttribute("data-section")
      const linkElement = link as HTMLElement

      if (section === activeSection) {
        if (section === "contact") {
          // Use inline styles to ensure background color changes
          linkElement.style.backgroundColor = "#7c3aed" // violet-600
        } else {
          link.classList.remove("text-zinc-300")
          link.classList.add("text-white", "font-semibold")
        }
      } else {
        if (section === "contact") {
          // Reset to default background color
          linkElement.style.backgroundColor = "#27272a" // zinc-800
        } else {
          link.classList.remove("text-white", "font-semibold")
          link.classList.add("text-zinc-300")
        }
      }
    })
  }

  // Intersection Observer for active navigation
  const observerOptions = {
    root: null,
    rootMargin: "-80px 0px -70% 0px", // Account for header height and trigger when section is in upper portion
    threshold: 0.1,
  }

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        const sectionId = entry.target.id
        let activeSection = sectionId

        // Map section IDs to navigation data-section values
        if (sectionId === "home") {
          activeSection = "home"
        } else if (sectionId.includes("experience")) {
          activeSection = "experience"
        } else if (sectionId.includes("projects")) {
          activeSection = "projects"
        } else if (sectionId.includes("contact")) {
          activeSection = "contact"
        }

        updateActiveNavigation(activeSection)
      }
    })
  }, observerOptions)

  // Observe sections when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Wait a bit for elements to be rendered
    setTimeout(() => {
      const sections = [
        document.getElementById("home"),
        document.querySelector('[id*="experience"]'),
        document.querySelector('[id*="projects"]'),
        document.querySelector('[id*="contact"]'),
      ].filter(Boolean)

      sections.forEach((section) => {
        if (section) observer.observe(section)
      })

      // Set initial active state
      updateActiveNavigation("home")
    }, 500)
  })
</script>
